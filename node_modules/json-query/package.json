{
  "author": {
    "name": "Matt McKegg",
    "email": "matt@wetsand.co.nz",
    "url": "http://twitter.com/MattMcKegg"
  },
  "name": "json-query",
  "description": "Retrieves values from JSON objects for data binding. Offers params, nested queries, deep queries, custom reduce/filter functions and simple boolean logic. Browserify compatible.",
  "version": "0.1.1",
  "homepage": "http://github.com/mmckegg/json-query",
  "repository": {
    "type": "git",
    "url": "git://github.com/mmckegg/json-query.git"
  },
  "main": "json-query",
  "scripts": {
    "test": "tap test/*.js --tap"
  },
  "dependencies": {},
  "devDependencies": {
    "tap": "*"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "keywords": [
    "data binding",
    "filter",
    "json",
    "query"
  ],
  "readme": "JSON Query\n===\n\nRetrieves values from JSON objects for data binding. Offers params, nested queries, deep queries, custom reduce/filter functions and simple boolean logic.\n\nUsed internally by [JSON Context](https://github.com/mmckegg/json-context) for data binding.\n\n### jsonQuery(query, options)\n\nSpecify a query and what to query - returns an object that describes the result of the query.\n\n```js\nvar context = {\n  people: [\n    {name: 'Matt', country: 'NZ'},\n    {name: 'Pete', country: 'AU'}\n  ]\n}\n\njsonQuery('people[country=NZ].name', {\n  rootContext: context\n}) //=> {value: 'Matt', parents: [...], key: 0} ... etc\n```\n\n#### options:\n\n- **rootContext**: The main JS object to query.\n- **context** (optional): The current object we're interested in. Is accessed in query by starting with `.`\n- **parent** (optional): An additional context for looking further up the tree. Is accessed by `..`\n- **filters**: Specify an object containing filter functions. Accessed by ':filterName'\n- **force** (optional): Specify an object to be returned from the query if the query fails - it will be saved into the place the query expected the object to be.\n\n## Queries\n\nQueries are strings that describe an object or value to pluck out, or manipulate from the context object. The syntax is a little bit CSS, a little bit JS, but pretty powerful.\n\n### Accessing properties (dot notation)\n\n`person.name`\n\n### Array accessors\n\n`people[0]`\n\n### Array filter\n\n`people[country=NZ]`\n\n### Or syntax\n\n`person.greetingName|person.name`\n\n### Deep queries\n\nSearch through multiple levels of Objects/Arrays\n\n```js\nvar context = {\n  grouped_people: {\n    'friends': [\n      {name: 'Steve', country: 'NZ'},\n      {name: 'Bob', country: 'US'}\n    ],\n    'enemies': [\n      {name: 'Evil Steve', country: 'AU'}\n    ]\n  }\n}\n\njsonQuery('grouped_people[][country=NZ]', {rootContext: context})\n```\n### Inner queries\n\n```js\nvar context = {\n  page: {\n    id: 'page_1',\n    title: 'Test'\n  },\n  comments_lookup: {\n    'page_1': [\n      {id: 'comment_1', parent_id: 'page_1', content: \"I am a comment\"}\n    ]\n  }\n}\n\n// get the comments that match page's id\njsonQuery('comments_lookup[{page.id}]', {rootContext: context})\n```\n\n### Filter functions\n\nAllows to to hack the query system to do just about anything.\n\nSome nicely contrived examples:\n\n```js\nvar filters = {\n  greetingName: function(input){\n    if (input.knownAs){\n      return input.known_as\n    } else {\n      return input.name\n    }\n  }\n  },\n  and: function(input, params){\n    return input && params.args[0]\n  },\n  text: function(input, params){\n    return params.args[0]\n  },\n  then: function(input, params){\n    if (input){\n      return params.args[0]\n    } else {\n      return params.args[1]\n    }\n  }\n}\n\nvar context = {\n  is_fullscreen: true,\n  is_playing: false,\n  user: {\n    name: \"Matthew McKegg\",\n    known_as: \"Matt\"\n  }\n}\n\njsonQuery('user:greetingName', {\n  rootContext: context, filters: filters\n}).value //=> \"Matt\"\n\njsonQuery(['is_fullscreen:and({is_playing}):then(?, ?)', \"Playing big!\", \"Not so much\"], {\n  rootContext: context, filters: filters\n}).value //=> \"Not so much\"\n\njsonQuery(':text(This displays text cos we made it so)', {\n  filters: filters\n}).value //=> \"This displays text cos we made it so\"\n\n```\n\n### Context\n\nSpecifying context ('rootContext', 'context', and 'parent' options) is good for databinding and working on a specific object and still keeping the big picture available.\n\n```js\nvar data = {\n  styles: {\n    bold: 'font-weight:strong',\n    red: 'color: red'\n  },\n  paragraphs: [\n    {content: \"I am a red paragraph\", style: 'red'},\n    {content: \"I am a bold paragraph\", style: 'bold'},\n  ],\n}\n\nvar pageHtml = ''\ndata.paragraphs.forEach(function(paragraph){\n  var style = jsonQuery('styles[{.style}]', {rootContext: data, context: paragraph}).value\n  var content = jsonQuery('.content', rootContext: data, context: paragraph) // pretty pointless :)\n  pageHtml += \"<p style='\" + style \"'>\" + content + \"</p>\"\n})\n```\n\n## Query Params\n\nParams can be specified by passing in an array with the first param the query (with ? params) and subsequent params.\n\n```js\njsonQuery(['people[country=?]', 'NZ'])\n```\n\n## Dynamic Queries\n\nDynamic queries are asynchronous and can execute custom functions to get their data. It's a handy interface over the basic tokenizer.\n\nBut I'm considering ditching the async queries, as this makes the whole thing way more complicated than it needs to be!\n\n### jsonQuery.dynamic(query, options)\n\nToo complicated for me to remember!",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mmckegg/json-query/issues"
  },
  "_id": "json-query@0.1.1",
  "_from": "json-query@"
}
